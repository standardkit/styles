@use '../utilities/base' as *;
@use '../utilities/log';
@use '../variables';

// Checks if the keys for breakpoints don't cause conflicts with any complex modifier
@function check-configuration($modifiers: ()) {

  $breakpoints: map-get-default($modifiers, breakpoints);
  $keys: map-keys($breakpoints);

  $check: check-naming-conflicts(color, variables.$color-keys, $keys);
  $check: check-naming-conflicts(fill-type, variables.$fill-type-keys, $keys);
  $check: check-naming-conflicts(elevation, variables.$elevation-keys, $keys);

  @return null;
}

// Checks if one of the keys overlaps with any reserved keys
// e.g. colors: (primary: (main: #fff)) & breakpoints: (main: 12em)
// In the example 'main' is the conflicted keyword
// Gives a warning to the user because it could cause priority conflicts
@function check-naming-conflicts($modifier, $reserved-keys, $breakpoint-keys) {
  @each $key in $breakpoint-keys {
    @if in-list($reserved-keys, $key) {
      $log: log.warning('Naming conflict for breakpoint: "#{$key}" with reserved key for "#{$modifier}". Can cause priority issues!');
    }
  }
  @return null;
}
