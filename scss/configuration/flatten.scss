// TODO : What if no modifiers? omit the whole thing? make special option for it now not allow it.

@each $theme-name, $theme in $themes {
map-set($themes, $theme-name, flatten-theme($theme));
}

$configurable-modifier: (
  color: (
    basic:error warning success info primary text,
    minimal: text primary
  ),
  fill-type: (
    basic: fill plain outline,
    minimal: fill
  ),
  elevation:(
    basic: none s m l,
    minimal: m
  ),
  margin: (
    basic: none s m l,
    minimal: m
  ),
  padding: (
    basic: none s m l,
    minimal: m
  ),
  size: (
    basic: s m l,
    minimal: m
  ),
  width: (
    basic: s m l full,
    minimal: m
  ),
  corner: (
    basic: square s m l round,
    minimal: m
  ),
  border: (
    basic: none s m l,
    minimal: m
  ),
  focus-type: (),
  disabled-type: ()
);

@function flatten-theme($theme) {
  $flatTheme: ();
  $base: map-get-default($theme, base);
  $flatTheme: map-deep-merge($flatTheme, flatten-with-base($base, $theme, options));
  $flatTheme: map-deep-merge($flatTheme, flatten-with-base($base, $theme, components)); // TODO : Check all the values if they exist
  $flatTheme: map-deep-merge($flatTheme, flatten-modifiers($base, $theme));
}

@function flatten-with-base($base, $theme, $key) {
  @return (#{$key}: map-deep-merge(map-get-default($base, $key), map-get-default($theme, $key)));
}

@function flatten-modifiers($base, $theme) {
  $map: ();
  @each $modifier, $modifier-sets in $configurable-modifier {

    $base-modifiers: get-modifiers($base, $modifier);
    $user-modifiers: get-modifiers($theme, $modifier);
    $theme-options: map-get-default($theme, options);
    $modifier-options: get-modifier-options($theme, $modifier);
    $flattened-modifiers: flatten-modifier($base-modifiers, $modifier-sets, $user-modifiers, $theme-options, $options);
    $default-modifier: get-default-modifier($flattened-modifiers, $modifier-options);

    $map: map-deep-merge($map, (
      #{$modifier}s: $flattened-modifiers,
      default-#{$modifier}: $default-modifier
    ));
  }
}

@function flatten-modifier($base-modifiers, $modifier-sets, $user-modifiers, $theme-options, $options) {
  @if map-get($options, merge) == replace {
    @return $user-modifiers;
  }

  // TODO : first grab from the use
  // TODO : if includes is set, grab those on top of the use
  // TODO : exclude all excludes
  // TODO : merge with base

  // TODO : Remove when done with flatten function
  //modifier-options: (
  //  use: 'minimal' | 'basic' | 'all',
  //  exclude: [],
  //  include: []
}

@function get-default-modifier($modifiers, $modifier-options, $base-modifier-options) {
  $key: map-get($modifier-options, default);
  $key: map-get($base-modifier-options, default) !default;

  $default: map-get($modifiers, $key);
  @if type-of($default) != null {
    @return $key;
  }
  @if length($modifiers) > 0 {
    @return nth($modifiers, 1);
  }
  @return '';
}

@function get-base-theme($theme) {
  $base: map-get($theme, base);
  $base: () !default;

  @return $base;
}

@function get-modifiers($theme, $modifier) {
  @return map-get-default($theme, #{$modifier}s);
}

@function get-modifier-options($theme, $modifier) {
  @return map-get-default($theme, #{$modifier}-options);
}
