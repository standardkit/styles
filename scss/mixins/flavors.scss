@use '../utilities/base' as *;
@use '../variables/modifiers';

// TODO : breakpoints in flavors

@mixin flavors-and-types($class: '', $configuration: (), $modifiers: (), $component-modifiers: []) {
  .#{$class} {

    $default-modifiers: map-filter-prefixed-keys($configuration, default-);
    $types: map-exclude-prefixed-keys($configuration, default-);

    $default-color: null;
    $default-fill: null;
    $default-hover: null;

    $non-overridable-flavors: get-non-overridable-modifiers($types, $modifiers, $default-modifiers, $component-modifiers);

    @include default-flavors(
        $default-modifiers,
        $modifiers,
        $component-modifiers,
        $class,
        $non-overridable-flavors
    );
    @include default-types($types, $modifiers, $non-overridable-flavors);
  }
}

@function get-non-overridable-modifiers($types: (), $modifiers: (), $default-modifiers: (), $component-modifiers: ()) {
  $flavors: ();
  @if not types-contains-flavor($types, 'color') and
      not types-contains-flavor($types, 'fill') and
      not types-contains-flavor($types, 'hover') {
    @return $flavors;
  }
  @each $modifier in ['color', 'fill', 'hover'] {
    @if in-list($component-modifiers, $modifier) {
      $flavor: get-default-flavor($default-modifiers, $modifier);
      $flavor: get-default-flavor($modifiers, $modifier) !default;
      $flavors: map-set($flavors, $modifier, $flavor);
    }
  }
  @return $flavors;
}

@function types-contains-flavor($types: (), $flavor: '') {
  @each $type, $type-configuration in $types {
    @if in-list(map-keys($type-configuration), default-#{$flavor}) {
      @return true;
    }
  }
  @return false;
}

@mixin default-flavors(
  $default-modifiers: (),
  $modifiers: (),
  $component-modifiers: (),
  $class: '',
  $non-overridable-flavors: ()
) {
  $default-modifiers: map-strip-key-prefix($default-modifiers, default-);
  $configured-keys: map-keys($default-modifiers);

  @each $modifier in modifiers.$all {
    @if not in-list($configured-keys, $modifier) and in-list($component-modifiers, $modifier) {
      $flavor: get-default-flavor($modifiers, $modifier);
      $default-modifiers: map-set($default-modifiers, $modifier, $flavor);
    }
  }
  @each $modifier, $default in $default-modifiers {
    @if in-list(map-keys($non-overridable-flavors), $modifier) {
      &:not([class*='#{$class}--']) {
        @include default-flavor($modifier, $default);
      }
    } @else {
      @include default-flavor($modifier, $default);
    }
  }
}

@mixin default-types($types: (), $modifiers: (), $non-overridable-modifiers: ()) {
  @each $type, $default-flavors in $types {
    &--#{$type} {
      $default-flavors: map-strip-key-prefix($default-flavors, default-);
      @each $modifier, $flavor in $default-flavors {
        @include default-flavor($modifier, $flavor);
      }
      @each $modifier, $flavor in $non-overridable-modifiers {
        @if not in-list(map-keys($default-flavors), $modifier) {
          @include default-flavor($modifier, $flavor);
        }
      }
    }
  }
}


@mixin default-flavor($modifier, $flavor) {
  &:not([class*='#{$modifier}--']) {
    @extend .#{$modifier}--#{$flavor} !optional;
  }
}
