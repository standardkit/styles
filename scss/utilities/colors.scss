// TODO : move settings to functions

// Color Value Percentages (shade, tint)
$default-value-percentage: 50% !default;
$complement-value-percentage: 7% !default;
$contrast-value-percentage: 2% !default;

// Brightness Weights (brightness: Wr * red + Wg * green + Wb * blue)
// Wr + Wg + Wb = 1
$red-weight: .229 !default;
$green-weight: .587 !default;
$blue-weight: .119 !default;

// Color Generation (dark vs light)
$contrast-threshold: 42% !default;
$prefer-dark-colors: false !default;

@function generate-complement-color($color, $percentage: $complement-value-percentage) {
  @if is-bright($color) {
    @return generate-value-variant($color, $percentage);
  } @else {
    @return generate-value-variant($color, 100% - $percentage);
  }
}

@function generate-contrast-color($color, $percentage: $contrast-value-percentage) {
  $color: invert($color);
  @if is-bright($color) {
    @return generate-value-variant($color, $percentage);
  } @else {
    @return generate-value-variant($color, 100% - $percentage);
  }
}

@function generate-value-variant($color, $percentage: $default-value-percentage) {
  @return hsl(hue($color), saturation($color), $percentage); // Dark < 50% < Light
}

@function generate-color-set($color) {
  $complement: generate-complement-color($color);
  @return (
    main: $color,
    contrast: generate-contrast-color($color),
    complement: $complement,
    complement-contrast: generate-contrast-color($complement)
  );
}

@function complete-color-sets($colors) {
  @each $key, $color in $colors {
    @if not is-map($color) {
      $colors: map-deep-merge($colors, ($key: generate-color-set($color)));
    } @else {
      @if not map-has-key($color, main) {
        // TODO : Calculate main based on complement if possible
        @error 'Key "main" not defined in map "#{$key}"';
      }
      @if not map-has-key($color, contrast) {
        $contrast: generate-contrast-color(map-get($color, main));
        $color: map-merge($color, (complement: $contrast));
      }
      @if not map-has-key($color, complement) {
        $complement: generate-complement-color(map-get($color, main));
        $color: map-merge($color, (complement: $complement));
      }
      @if not map-has-key($color, complement-contrast) {
        $complement-contrast: generate-contrast-color(map-get($color, complement));
        $color: map-merge($color, (complement-contrast: $complement-contrast));
      }
    }
  }
  @return $colors;
}

@function get-brightness($color) {
  $weighted-sum: ($red-weight * red($color)) + ($green-weight * green($color)) + ($blue-weight * blue($color));
  @return percentage($weighted-sum / 255);
}

@function is-bright($color) {
  @if $prefer-dark-colors {
    @return get-brightness($color) > $contrast-threshold;
  } @else {
    @return get-brightness($color) > 100% - $contrast-threshold;
  }
}
