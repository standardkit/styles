@use 'base' as *;
@use 'log' as *;
@use '../variables' as *;

@function flatten-theme($theme: ()) {
  $flat-theme: ();
  $base: map-get-default($theme, base);
  $base-modifiers: map-get-default($base, modifiers);
  $modifiers: map-get-default($theme, modifiers);
  $options: map-get-default($theme, options);
  $base-types: map-get-default($base, types);
  $types: map-get-default($theme, types);

  $flat-theme: map-set($flat-theme, options, flatten-options($base, $theme));
  $flat-theme: map-set($flat-theme, modifiers, flatten-modifiers($base-modifiers, $modifiers, $options));
  $flat-theme: map-set($flat-theme, components, flatten-components($base, $theme, $flat-theme));

  @return $flat-theme;
}

// Merge options from the base theme
@function flatten-options($base, $theme) {
  @return map-deep-merge(map-get-default($base, options), map-get-default($theme, options));
}

// For each modifier, create 'modifiers' and 'default-modifier' entries to be used in the theme: modifiers
@function flatten-modifiers($base-modifiers, $modifiers, $theme-options) {
  $map: ();
  @each $modifier, $sets in $configurable-modifiers {

    $base-flavors: get-flavors($base-modifiers, $modifier);
    $flavors: get-flavors($modifiers, $modifier);
    $options: get-modifier-options($modifiers, $modifier);

    $flavors: flatten-modifier($base-flavors, $flavors, $sets, $theme-options, $options);
    $default-modifier: flatten-default-flavor($modifier, $flavors, $base-modifiers, $modifiers, true);

    @if $flavors != () {
      $map: map-deep-merge($map, (
        #{$modifier}s: $flavors,
        default-#{$modifier}: $default-modifier
      ));
    }
  }
  @return $map;
}

// Based on the 'modifier-options', select and merge flavors from base and merge with provided values
@function flatten-modifier($base-flavors, $flavors, $flavor-sets, $theme-options, $flavor-options) {
  @if map-get($flavor-options, merge) == replace or map-get($theme-options, merge-modifiers) == replace {
    @return $flavors;
  }
  @if map-get($flavor-options, set) == none or map-get($theme-options, modifier-sets) == none {
    @return $flavors;
  }
  $set: map-get($flavor-options, set);
  $set: map-get($theme-options, modifier-sets) !default;
  $set: all !default;

  @if $set != all {
    $keys: map-get-default($flavor-sets, $set);
    $keys: join($keys, map-get-default($flavor-options, include));
    $base-flavors: map-filter-keys($base-flavors, $keys);
  }
  $exclude: map-get-default($flavor-options, exclude);
  $base-flavors: map-exclude-keys($base-flavors, $exclude);

  @return map-merge($base-flavors, $flavors);
}

// Checks if the preferred or base flavor is possible, otherwise default to the first possible flavor or '' if empty
@function flatten-default-flavor($modifier, $flavors, $base-modifiers, $modifiers, $use-first: false) {
  $key: get-default-flavor($modifiers, $modifier);
  $default: map-get($flavors, $key);
  @if not is-null($default) {
    @return $key;
  } @else if not is-null($key) {
    $error: error('Configured flavor: "#{$key}" for modifier: "#{$modifier}" not defined');
  }
  $key: get-default-flavor($base-modifiers, $modifier);
  $default: map-get($flavors, $key);
  @if not is-null($default) {
    $warning: warning('Base-theme default: "#{$key}" for modifier: "#{$modifier}" is not available');
    @return $key;
  }
  @if $use-first and length($flavors) > 0 {
    $fallback: nth(map-keys($flavors), 1);
    $warning: info('Default #{$modifier} "#{$key}" not found, falling back to "#{$fallback}"');
    @return $fallback;
  }

  @return null;
}

// Check all the default modifiers from theme onto base and validate with the flattened list to see if they exist
@function flatten-components($base, $theme, $flattened-modifiers) {

  $base-components: map-get-default($base, components);
  $theme-components: map-get-default($theme, components);
  $configured-components: map-deep-merge($base-components, $theme-components);

  @each $component, $component-modifiers in $configured-components {
    @each $modifier in $all-modifiers {

      @if map-has-key($component-modifiers, default-#{$modifier}) {
        $flavors: get-flavors($flattened-modifiers, $modifier);
        $default: flatten-default-flavor(
            $modifier,
            $flavors,
            map-get-default($base-components, $component),
            map-get-default($theme-components, $component)
        );
        $component-modifiers: map-set($component-modifiers, default-#{$modifier}, $default);
      }
    }
    $configured-components: map-set($configured-components, $component, $component-modifiers);
  }
  @return $configured-components;
}

// Check all the types and set default values to null for non-existing values
@function flatten-types($base-types, $theme-types, $flattened-modifiers) {
  $types: map-deep-merge($base-types, $theme-types);

  @each $type, $modifiers in $types {
    $modifiers: flatten-type($base-types, $theme-types, $modifiers, $flattened-modifiers, $types, $type);
    $types: map-set($types, $type, $modifiers);
  }
  @return $types;
}

@function flatten-type($base-types, $theme-types, $modifiers, $flattened-modifiers, $types, $type, $extended: []) {
  $modifiers: flatten-modifiers-for-type($base-types, $theme-types, $modifiers, $flattened-modifiers, $type);

  $extend-key: map-get($modifiers, extend);
  @if not is-null($extend-key) {
    $modifiers: map-remove($modifiers, extend);
    @if $extend-key == $type or in-list($extended, $extend-key) {
      $error: error('Circular extension detected for type "#{$type}". "#{$extend-key}" already in extension tree');
      @return $modifiers;
    } @else if not map-has-key($types, $extend-key) {
      $error: error('Unable to extend type "#{$extend-key}". Type is not available');
      @return $modifiers;
    } @else {
      $extended: append($extended, $extend-key);
      $extended-type: map-get($types, $extend-key);
      $extended-type: flatten-type($base-types, $theme-types, $extended-type, $flattened-modifiers, $types, $extend-key, $extended);
      @return map-merge($extended-type, $modifiers);

    }
  } @else {
    @return $modifiers;
  }
}

@function flatten-modifiers-for-type($base-types, $theme-types, $type-modifiers, $flattened-modifiers, $type) {
  @each $modifier in $all-modifiers {
    @if map-has-key($type-modifiers, default-#{$modifier}) {
      $flavors: get-flavors($flattened-modifiers, $modifier);
      $default: flatten-default-flavor(
          $modifier,
          $flavors,
          map-get-default($base-types, $type),
          map-get-default($theme-types, $type)
      );
      $type-modifiers: map-set($type-modifiers, default-#{$modifier}, $default);
    }
  }
  $type-modifiers: map-deep-clean($type-modifiers);
  @return $type-modifiers;
}
