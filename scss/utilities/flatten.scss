@use 'base' as *;
@use '../variables' as *;

@function flatten-theme($theme: ()) {
  $flat-theme: ();
  $base: map-get-default($theme, base);
  $base-modifiers: map-get-default($base, modifiers);
  $modifiers: map-get-default($theme, modifiers);
  $options: map-get-default($theme, options);
  $base-types: map-get-default($base, types);
  $types: map-get-default($theme, types);

  $flat-theme: map-set($flat-theme, options, flatten-options($base, $theme));
  $flat-theme: map-set($flat-theme, modifiers, flatten-modifiers($base-modifiers, $base-modifiers, $options));
  $flat-theme: map-set($flat-theme, components, flatten-components($base, $theme, $flat-theme));

  @return $flat-theme;
}

// Merge options from the base theme
@function flatten-options($base, $theme) {
  @return map-deep-merge(map-get-default($base, options), map-get-default($theme, options));
}

// For each modifier, create 'modifiers' and 'default-modifier' entries to be used in the theme: modifiers
@function flatten-modifiers($base-modifiers, $modifiers, $theme-options) {
  $map: ();
  @each $modifier, $sets in $configurable-modifiers {

    $base-flavors: get-flavors($base-modifiers, $modifier);
    $flavors: get-flavors($modifiers, $modifier);
    $options: get-modifier-options($modifiers, $modifier);

    $flavors: flatten-modifier($base-flavors, $flavors, $sets, $theme-options, $options);
    $default-modifier: flatten-default-flavor($modifier, $flavors, $base-modifiers, $modifiers);

    @if $flavors != () {
      $map: map-deep-merge($map, (
        #{$modifier}s: $flavors,
        default-#{$modifier}: $default-modifier
      ));
    }
  }
  @return $map;
}

// Based on the 'modifier-options', select and merge flavors from base and merge with provided values
@function flatten-modifier($base-flavors, $flavors, $flavor-sets, $theme-options, $flavor-options) {
  @if map-get($flavor-options, merge) == replace or map-get($theme-options, merge-modifiers) == replace {
    @return $flavors;
  }
  @if map-get($flavor-options, set) == none or map-get($theme-options, modifier-sets) == none {
    @return $flavors;
  }
  $set: map-get($flavor-options, set);
  $set: map-get($theme-options, modifier-sets) !default;
  $set: all !default;

  @if $set != all {
    $keys: map-get-default($flavor-sets, $set);
    $keys: join($keys, map-get-default($flavor-options, include));
    $base-flavors: map-filter-keys($base-flavors, $keys);
  }
  $exclude: map-get-default($flavor-options, exclude);
  $base-flavors: map-exclude-keys($base-flavors, $exclude);

  @return map-merge($base-flavors, $flavors);
}

// Checks if the preferred or base flavor is possible, otherwise default to the first possible flavor or '' if empty
@function flatten-default-flavor($modifier, $flavors, $base-modifiers, $modifiers) {
  $key: get-default-flavor($modifiers, $modifier);
  $default: map-get($flavors, $key);
  @if not is-null($default) {
    @return $key;
  }
  $key: get-default-flavor($base-modifiers, $modifier);
  $default: map-get($flavors, $key);
  @if not is-null($default) {
    @return $key;
  }
  @if length($flavors) > 0 {
    @return nth(map-keys($flavors), 1);
  }
  @return '';
}

@function flatten-components($base, $theme, $modifiers) {

  $base-components: map-get-default($base, components);
  $theme-components: map-get-default($theme, components);
  $configured-components: map-deep-merge($base-components, $theme-components);

  @each $component, $component-modifiers in $configured-components {
    @each $modifier in $all-modifiers {

      @if map-has-key($component-modifiers, default-#{$modifier}) {
        $flavors: get-flavors($modifiers, $modifier);
        $default: flatten-default-flavor(
            $modifier,
            $flavors,
            map-get-default($base-components, $component),
            map-get-default($theme-components, $component)
        );
        $component-modifiers: map-set($component-modifiers, default-#{$modifier}, $default);
      }
    }
    $configured-components: map-set($configured-components, $component, $component-modifiers);
  }
  @return $configured-components;
}

@function get-flavors($modifiers, $modifier) {
  @return map-get-default($modifiers, #{$modifier}s);
}

@function get-default-flavor($theme, $modifier) {
  @return map-get($theme, default-#{$modifier});
}

@function get-modifier-options($theme, $modifier) {
  $modifier: strip-suffix($modifier, -type);
  @return map-get-default($theme, #{$modifier}-options);
}
