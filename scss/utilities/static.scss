@function map-deep-merge($parent-map, $child-map) {
  $result: $parent-map;
  @each $key, $value in $child-map {
    @if (not map-has-key($result, $key))
    or (type-of(map-get($result, $key)) != type-of($value))
    or (not (type-of(map-get($result, $key)) == map and type-of($value) == map)) {
      $result: map-merge($result, ($key: $value));
    } @else {
      $result: map-merge($result, ($key: map-deep-merge(map-get($result, $key), $value)));
    }
  }
  @return $result;
}

@function map-get-default($map, $key, $default: ()) {
  $value: map-get($map, $key);
  $value: $default !default;

  @return $value;
}

@function map-exclude-keys($map, $keys: []) {
  $new-map: ();
  @each $key, $value in $map {
    @if not index($keys, $key) {
      $new-map: map-merge($new-map, (#{$key}: $value));
    }
  }
  @return $new-map;
}

@function map-filter-keys($map, $keys: []) {
  $new-map: ();
  @each $key in $keys {
    @if map-has-key($map, $key) {
      $new-map: map-merge($new-map, (#{$key}: map-get($map, $key)));
    }
  }
  @return $new-map;
}

@function in-list($key, $list) {
  @return index($list, $key) == true;
}

@function map-set($map, $key, $value) {
  @return map-merge($map, (#{$key}: $value));
}

@function is-map($variable) {
  @return type-of($variable) == 'map';
}

@function is-list($variable) {
  @return type-of($variable) == 'list';
}

@function is-string($variable) {
  @return type-of($variable) == 'string';
}
