@use '../node_modules/sass-true' as *;
@use '../scss/utilities/base';

@include describe('map-deep-merge()') {
  // TODO : Implement
}

@include describe('map-get-default()') {
  // TODO : Implement
}

@include describe('map-exclude-keys()') {
  // TODO : Implement
}

@include describe('map-filter-keys()') {
  // TODO : Implement
}

@include describe('in-list()') {
  $list: primary secondary tertiary;
  @include it('should return true when item is in the list') {
    @include assert-true(base.in-list($list, primary));
  }
  @include it('should return true when item is second in the list') {
    @include assert-true(base.in-list($list, secondary));
  }
  @include it('should return true when item is last in the list') {
    @include assert-true(base.in-list($list, tertiary));
  }
  @include it('should return false when item is not in the list') {
    @include assert-false(base.in-list($list, custom));
  }
}

@include describe('map-set()') {
  @include it('should set a variable that wasn\'t there before') {
    $result: base.map-set((), margin, 1rem);
    @include assert-equal($result, (margin: 1rem));
  }
  @include it('should override a variable that was already set') {
    $result: base.map-set((color: blue), color, red);
    @include assert-equal($result, (color: red));
  }
  $map: (colors: (primary: (one: red, two: blue)));
  @include it('should work on maps') {
    $result: base.map-set($map, colors, (primary: blue, secondary: red));
    @include assert-equal($result, (colors: (primary: blue, secondary: red)));
  }
  @include it('should work on nested maps') {
    $result: base.map-set($map, colors, (primary: (one: black, two: white), secondary: red));
    @include assert-equal($result, (colors: (primary: (one: black, two: white), secondary: red)));
  }
}

@include describe('is-map()') {
  // TODO : Implement
}

@include describe('is-list()') {
  // TODO : Implement
}

@include describe('is-string()') {
  // TODO : Implement
}

@include describe('is-null()') {
  // TODO : Implement
}
