@use '../node_modules/sass-true' as *;
@use '../scss/utilities/flatten';

@include describe('get-flavors()') {
  @include it('should return a map of the given modifiers flavors') {
    $theme: (colors: (primary: white, secondary: black));
    $flavors: flatten.get-flavors($theme, color);

    @include assert-equal($flavors, (primary: white, secondary: black));
  }

  @include it('should return an empty map if the theme doesn\'t have the modifier') {
    $theme: (margins: (m: 1rem));
    $flavors: flatten.get-flavors($theme, color);

    @include assert-equal($flavors, ());
  }
}

@include describe('get-default-flavor()') {
  @include it('should return a map of the given modifiers flavors') {
    $theme: (colors: (primary: white, secondary: black));
    $flavors: flatten.get-flavors($theme, color);

    @include assert-equal($flavors, (primary: white, secondary: black));
  }

  @include it('should return an empty map if the theme doesn\'t have the modifier') {
    $theme: (margins: (m: 1rem));
    $flavors: flatten.get-flavors($theme, color);

    @include assert-equal($flavors, ());
  }
}

@include describe('get-modifier-options()') {
  @include it('should return a map of the modifiers options') {
    $theme: (color-options: (use: all, include: [first, last]));
    $options: flatten.get-modifier-options($theme, color);

    @include assert-equal($options, (use: all, include: [first, last]));
  }

  @include it('should return an empty map if the theme doesn\'t have the modifier options') {
    $theme: (margin-options: (use: all));
    $options: flatten.get-modifier-options($theme, color);

    @include assert-equal($options, ());
  }
}

@include describe('get-default-flavor()') {
  $flavors: (primary: blue, secondary: red, tertiary: purple);
  @include it('should set the first possible flavor from the list if default is not set') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (), ());
    @include assert-equal($flavor, primary);
  }
  @include it('should set the first possible flavor from the list if base default does not exist') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (default-color: custom), ());
    @include assert-equal($flavor, primary);
  }
  @include it('should set the first possible flavor from the list if configured default does not exist') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (), (default-color: custom));
    @include assert-equal($flavor, primary);
  }
  @include it('should set the default to configured option if it exists') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (), (default-color: secondary));
    @include assert-equal($flavor, secondary);
  }
  @include it('should set the default to base option if it exists') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (default-color: secondary), ());
    @include assert-equal($flavor, secondary);
  }
  @include it('should set override the base option') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (default-color: secondary), (default-color: tertiary));
    @include assert-equal($flavor, tertiary);
  }
  @include it('should fallback to base option if configured default does not exist') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (default-color: secondary), (default-color: custom));
    @include assert-equal($flavor, secondary);
  }
  @include it('should fallback to first possible flavor if base & configured don\'t exist') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (default-color: fake), (default-color: custom));
    @include assert-equal($flavor, primary);
  }
}

@include describe('flatten-components()') {
  @include it('should merge base & theme components or fallback to first possible flavor for modifier') {
    $base: (components: (alert: (default-color: secondary, default-margin: xl), button: (default-padding: xl)));
    $theme: (components: (alert: (default-margin: xs, default-padding: fake), button: (default-color: tertiary)));
    $modifiers: (
      colors: (primary: red, secondary: blue, tertiary: purple),
      margins: (none: 0, xs: 1rem, xl: 2rem),
      paddings: (m: 2rem, xl: 4rem)
    );
    $result: (
      alert: (default-color: secondary, default-margin: xs, default-padding: m),
      button: (default-padding: xl, default-color: tertiary)
    );
    $components: flatten.flatten-components($base, $theme, $modifiers);

    @include assert-equal($components, $result);
  }
}

@include describe('flatten-options()') {
  $base: (options: (setting: false, custom: red));
  $theme: (options: (setting: true, primary: blue));
  @include it('should merge all options and theme should override base options') {
    $options: flatten.flatten-options($base, $theme);
    @include assert-equal($options, (setting: true, custom: red, primary: blue));
  }
  @include it('should work if theme options are empty') {
    $options: flatten.flatten-options($base, ());
    @include assert-equal($options, (setting: false, custom: red));
  }
  @include it('should work if base options are empty') {
    $options: flatten.flatten-options((), $theme);
    @include assert-equal($options, (setting: true, primary: blue));
  }
  @include it('should work if both are empty') {
    $options: flatten.flatten-options((), ());
    @include assert-equal($options, ());
  }
}

@include describe('flatten-modifier()') {
  $base-flavors: (primary: blue, secondary: red, tertiary: purple);
  $custom-flavors: (custom: hotpink);
  $sets: (minimal: primary, basic: tertiary secondary);
  @include it('should just return all the custom flavors if merge == "replace" in modifier options') {
    $flavors: flatten.flatten-modifier($base-flavors, $custom-flavors, $sets, (), (merge: replace));
    @include assert-equal($flavors, (custom: hotpink));
  }
  @include it('should just return all the custom flavors if merge-modifiers == "replace" in theme options') {
    $flavors: flatten.flatten-modifier($base-flavors, $custom-flavors, $sets, (merge-modifiers: replace), ());
    @include assert-equal($flavors, (custom: hotpink));
  }
  @include it('should return all flavors if I just specify some custom flavors') {
    $flavors: flatten.flatten-modifier($base-flavors, $custom-flavors, $sets, (), ());
    @include assert-equal($flavors, (primary: blue, secondary: red, tertiary: purple, custom: hotpink));
  }
  @include it('should return no base flavors if modifier-sets == "none"') {
    $flavors: flatten.flatten-modifier($base-flavors, $custom-flavors, $sets, (modifier-sets: none), ());
    @include assert-equal($flavors, (custom: hotpink));
  }
  @include it('should return no base flavors if modifier set == "none"') {
    $flavors: flatten.flatten-modifier($base-flavors, $custom-flavors, $sets, (), (set: none));
    @include assert-equal($flavors, (custom: hotpink));
  }
  @include it('should minimal basic set + custom flavors if modifier set == "minimal"') {
    $flavors: flatten.flatten-modifier($base-flavors, $custom-flavors, $sets, (), (set: minimal));
    @include assert-equal($flavors, (primary: blue, custom: hotpink));
  }
  @include it('should override theme set') {
    $flavors: flatten.flatten-modifier($base-flavors, $custom-flavors, $sets, (modifier-sets: all), (set: minimal));
    @include assert-equal($flavors, (primary: blue, custom: hotpink));
  }
  @include it('should fallback on theme modifier-sets') {
    $flavors: flatten.flatten-modifier($base-flavors, $custom-flavors, $sets, (modifier-sets: basic), ());
    @include assert-equal($flavors, (secondary: red, custom: hotpink, tertiary: purple));
  }
  @include it('should add includes to the set') {
    $flavors: flatten.flatten-modifier($base-flavors, $custom-flavors, $sets,
      (modifier-sets: minimal), (include: tertiary)
    );
    @include assert-equal($flavors, (primary: blue, custom: hotpink, tertiary: purple));
  }
  @include it('should remove excludes') {
    $flavors: flatten.flatten-modifier($base-flavors, $custom-flavors, $sets, (), (exclude: tertiary primary));
    @include assert-equal($flavors, (secondary: red, custom: hotpink));
  }
  @include it('should remove excluded include') {
    $flavors: flatten.flatten-modifier($base-flavors, $custom-flavors, $sets, (),
      (set: minimal, include: tertiary, exclude: tertiary)
    );
    @include assert-equal($flavors, (primary: blue, custom: hotpink));
  }
}

@include describe('flatten-modifiers()') {
  // TODO : Implement
}

@include describe('flatten-theme()') {
  // TODO : Implement
}

@include describe('flatten-themes()') {
  // TODO : Implement function / move it from configuration to a function
  // TODO : Implement
}
