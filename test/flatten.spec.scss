@use '../node_modules/sass-true' as *;
@use '../scss/utilities/flatten';

@include describe('get-flavors()') {
  @include it('should return a map of the given modifiers flavors') {
    $theme: (colors: (primary: white, secondary: black));
    $flavors: flatten.get-flavors($theme, color);

    @include assert-equal($flavors, (primary: white, secondary: black));
  }

  @include it('should return an empty map if the theme doesn\'t have the modifier') {
    $theme: (margins: (m: 1rem));
    $flavors: flatten.get-flavors($theme, color);

    @include assert-equal($flavors, ());
  }
}

@include describe('get-default-flavor()') {
  @include it('should return a map of the given modifiers flavors') {
    $theme: (colors: (primary: white, secondary: black));
    $flavors: flatten.get-flavors($theme, color);

    @include assert-equal($flavors, (primary: white, secondary: black));
  }

  @include it('should return an empty map if the theme doesn\'t have the modifier') {
    $theme: (margins: (m: 1rem));
    $flavors: flatten.get-flavors($theme, color);

    @include assert-equal($flavors, ());
  }
}

@include describe('get-modifier-options()') {
  @include it('should return a map of the modifiers options') {
    $theme: (color-options: (use: all, include: [first, last]));
    $options: flatten.get-modifier-options($theme, color);

    @include assert-equal($options, (use: all, include: [first, last]));
  }

  @include it('should return an empty map if the theme doesn\'t have the modifier options') {
    $theme: (margin-options: (use: all));
    $options: flatten.get-modifier-options($theme, color);

    @include assert-equal($options, ());
  }
}

@include describe('get-default-flavor()') {
  $flavors: (primary: blue, secondary: red, tertiary: purple);
  @include it('should set the first possible flavor from the list if default is not set') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (), ());
    @include assert-equal($flavor, primary);
  }
  @include it('should set the first possible flavor from the list if base default does not exist') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (default-color: custom), ());
    @include assert-equal($flavor, primary);
  }
  @include it('should set the first possible flavor from the list if configured default does not exist') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (), (default-color: custom));
    @include assert-equal($flavor, primary);
  }
  @include it('should set the default to configured option if it exists') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (), (default-color: secondary));
    @include assert-equal($flavor, secondary);
  }
  @include it('should set the default to base option if it exists') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (default-color: secondary), ());
    @include assert-equal($flavor, secondary);
  }
  @include it('should set override the base option') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (default-color: secondary), (default-color: tertiary));
    @include assert-equal($flavor, tertiary);
  }
  @include it('should fallback to base option if configured default does not exist') {
    $flavor: flatten.flatten-default-flavor(color, $flavors, (default-color: secondary), (default-color: custom));
    @include assert-equal($flavor, secondary);
  }
}
